name: CI-CD

on:
    push:
        branches:
            - release

env:
    CARGO_TERM_COLOR: always
    PROJECT_NAME: snm

jobs:
    build:
        name: Release
        strategy:
            matrix:
                job:
                    - {
                          os: ubuntu-latest,
                          target: x86_64-unknown-linux-gnu,
                          use_cross: true,
                      }
                    - {
                          os: windows-latest,
                          target: x86_64-pc-windows-msvc,
                          use_cross: false,
                      }
                    - {
                          os: macos-latest,
                          target: x86_64-apple-darwin,
                          use_cross: false,
                      }
        runs-on: ${{ matrix.job.os }}
        steps:
            - name: Git Checkout
              uses: actions/checkout@v2
            - name: Initialize workflow variables
              id: vars
              shell: bash
              run: |
                  COMMIT_SHA=$(git rev-parse --short "$GITHUB_SHA")
                  # COMMIT_BRANCH=${GITHUB_REF##*/}
                  # RELEASE_TAG="${COMMIT_BRANCH}-${COMMIT_SHA}"

                  # staging directory
                  STAGING='_staging'
                  echo set-output name=STAGING::${STAGING}
                  echo ::set-output name=STAGING::${STAGING}

                  # Determine EXE suffix
                  EXE_suffix="" ;
                  case ${{ matrix.job.target }} in *-pc-windows-*) EXE_suffix=".exe" ;; esac;
                  echo set-output name=EXE_suffix::${EXE_suffix}
                  echo ::set-output name=EXE_suffix::${EXE_suffix}

                  # package name
                  PKG_suffix=".tar.gz" ;
                  case ${{ matrix.job.target }} in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
                  PKG_BASENAME=${PROJECT_NAME}-${{ matrix.job.target }}
                  PKG_NAME=${PKG_BASENAME}${PKG_suffix}
                  echo set-output name=PKG_suffix::${PKG_suffix}
                  echo set-output name=PKG_BASENAME::${PKG_BASENAME}
                  echo set-output name=PKG_NAME::${PKG_NAME}
                  echo ::set-output name=PKG_suffix::${PKG_suffix}
                  echo ::set-output name=PKG_BASENAME::${PKG_BASENAME}
                  echo ::set-output name=PKG_NAME::${PKG_NAME}
            - name: Create all needed build/work directories
              shell: bash
              run: |
                  mkdir -p '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}'
            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ matrix.job.target }}
                  override: true
                  profile: minimal
            - name: Build
              uses: actions-rs/cargo@v1
              with:
                  use-cross: ${{ matrix.job.use_cross }}
                  command: build
                  args: --release --target=${{ matrix.job.target }}
            - name: Upload build artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: ${{ env.PROJECT_NAME }}-${{ matrix.job.target }}
                  path: target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}
            - name: Package
              shell: bash
              id: package
              run: |
                  ARCHIVE_DIR='${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/'

                  # Binary
                  cp 'target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' "$ARCHIVE_DIR"

                  # base compressed package
                  pushd '${{ steps.vars.outputs.STAGING }}/' >/dev/null
                  case ${{ matrix.job.target }} in
                    *-pc-windows-*) 7z -y a '${{ steps.vars.outputs.PKG_NAME }}' '${{ steps.vars.outputs.PKG_BASENAME }}'/* | tail -2 ;;
                    *) tar czf '${{ steps.vars.outputs.PKG_NAME }}' '${{ steps.vars.outputs.PKG_BASENAME }}'/* ;;
                  esac;
                  popd >/dev/null
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
              with:
                  tag_name: ${{ steps.vars.outputs.COMMIT_SHA }}
                  release_name: ${{ env.PROJECT_NAME }}-${{ steps.vars.outputs.COMMIT_SHA }}
                  # body: |
                  #     Changes in this Release
                  #     - First Change
                  #     - Second Change
                  draft: false
                  prerelease: true
            - name: Upload Release Asset
              id: upload-release-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_NAME }}
                  asset_name: ${{ steps.vars.outputs.PKG_NAME }}
                  # asset_content_type: application/zip
